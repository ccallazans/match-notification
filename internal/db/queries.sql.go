// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package db

import (
	"context"
)

const existsTopic = `-- name: ExistsTopic :one
SELECT EXISTS (SELECT 1 FROM topics WHERE name = $1)
`

func (q *Queries) ExistsTopic(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsTopic, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existsUser = `-- name: ExistsUser :one
SELECT EXISTS (SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) ExistsUser(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existsUser, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const findAllTopicsByUserID = `-- name: FindAllTopicsByUserID :many
SELECT t.id, t.name
FROM topics t
JOIN user_topics ut ON t.id = ut.topic_id
WHERE ut.user_id = $1
`

func (q *Queries) FindAllTopicsByUserID(ctx context.Context, userID int32) ([]Topic, error) {
	rows, err := q.db.QueryContext(ctx, findAllTopicsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Topic
	for rows.Next() {
		var i Topic
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsersByTopicName = `-- name: FindAllUsersByTopicName :many
SELECT u.id, u.email 
FROM users u
JOIN user_topics ut ON u.id = ut.user_id
JOIN topics t ON ut.topic_id = t.id
WHERE t.name = $1
`

func (q *Queries) FindAllUsersByTopicName(ctx context.Context, name string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUsersByTopicName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNotificationByID = `-- name: FindNotificationByID :one
SELECT id, type, topic_id, body FROM notifications WHERE id = $1 LIMIT 1
`

func (q *Queries) FindNotificationByID(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, findNotificationByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TopicID,
		&i.Body,
	)
	return i, err
}

const findTopicByName = `-- name: FindTopicByName :one
SELECT id, name FROM topics WHERE name = $1 LIMIT 1
`

func (q *Queries) FindTopicByName(ctx context.Context, name string) (Topic, error) {
	row := q.db.QueryRowContext(ctx, findTopicByName, name)
	var i Topic
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const findUserTopicsByTopicID = `-- name: FindUserTopicsByTopicID :one
SELECT user_id, topic_id FROM user_topics WHERE user_id = $1 LIMIT 1
`

func (q *Queries) FindUserTopicsByTopicID(ctx context.Context, userID int32) (UserTopic, error) {
	row := q.db.QueryRowContext(ctx, findUserTopicsByTopicID, userID)
	var i UserTopic
	err := row.Scan(&i.UserID, &i.TopicID)
	return i, err
}

const findUserTopicsByUserID = `-- name: FindUserTopicsByUserID :one
SELECT user_id, topic_id FROM user_topics WHERE topic_id = $1 LIMIT 1
`

func (q *Queries) FindUserTopicsByUserID(ctx context.Context, topicID int32) (UserTopic, error) {
	row := q.db.QueryRowContext(ctx, findUserTopicsByUserID, topicID)
	var i UserTopic
	err := row.Scan(&i.UserID, &i.TopicID)
	return i, err
}

const saveNotification = `-- name: SaveNotification :one
INSERT INTO notifications (type, topic_id, body) VALUES ($1, $2, $3) RETURNING id, type, topic_id, body
`

type SaveNotificationParams struct {
	Type    string
	TopicID int32
	Body    string
}

func (q *Queries) SaveNotification(ctx context.Context, arg SaveNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, saveNotification, arg.Type, arg.TopicID, arg.Body)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.TopicID,
		&i.Body,
	)
	return i, err
}

const saveTopic = `-- name: SaveTopic :one
INSERT INTO topics (name) VALUES ($1) RETURNING id, name
`

func (q *Queries) SaveTopic(ctx context.Context, name string) (Topic, error) {
	row := q.db.QueryRowContext(ctx, saveTopic, name)
	var i Topic
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users (email) VALUES ($1) RETURNING id, email
`

func (q *Queries) SaveUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, saveUser, email)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const saveUserTopics = `-- name: SaveUserTopics :one
INSERT INTO user_topics (user_id, topic_id) VALUES ($1, $2) RETURNING user_id, topic_id
`

type SaveUserTopicsParams struct {
	UserID  int32
	TopicID int32
}

func (q *Queries) SaveUserTopics(ctx context.Context, arg SaveUserTopicsParams) (UserTopic, error) {
	row := q.db.QueryRowContext(ctx, saveUserTopics, arg.UserID, arg.TopicID)
	var i UserTopic
	err := row.Scan(&i.UserID, &i.TopicID)
	return i, err
}
